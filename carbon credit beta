{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyONdbRiXinblysHyuEuQJ8k",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/masoomprakhar/bluise/blob/master/carbon%20credit%20beta\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A7mg6v_u42KW",
        "outputId": "d8408def-bc27-4d97-9ff3-07fde6e96d84"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.45.1-py3-none-any.whl.metadata (8.9 kB)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.0)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n",
            "Collecting watchdog<7,>=2.1.5 (from streamlit)\n",
            "  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.39.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.45.1-py3-none-any.whl (9.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.9/9.9 MB\u001b[0m \u001b[31m39.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m46.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.45.1 watchdog-6.0.0\n"
          ]
        }
      ],
      "source": [
        "!pip install streamlit"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install streamlit\n",
        "!pip install streamlit -q\n",
        "\n",
        "# Create the app script\n",
        "code = \"\"\"\n",
        "import streamlit as st\n",
        "\n",
        "st.set_page_config(page_title='Carbon Credit Exchange', layout='wide')\n",
        "\n",
        "# In-memory \"database\"\n",
        "if 'users' not in st.session_state:\n",
        "    st.session_state['users'] = {'admin': {'password': 'admin', 'credits': 1000, 'balance': 10000}}  # default admin\n",
        "\n",
        "if 'logged_in_user' not in st.session_state:\n",
        "    st.session_state['logged_in_user'] = None\n",
        "\n",
        "if 'market' not in st.session_state:\n",
        "    # market listings: list of dicts {seller, credits, price_per_credit}\n",
        "    st.session_state['market'] = []\n",
        "\n",
        "def login():\n",
        "    st.title('Carbon Credit Exchange Login')\n",
        "    username = st.text_input('Username')\n",
        "    password = st.text_input('Password', type='password')\n",
        "    if st.button('Login'):\n",
        "        if username in st.session_state['users'] and st.session_state['users'][username]['password'] == password:\n",
        "            st.session_state['logged_in_user'] = username\n",
        "            st.success(f'Logged in as {username}')\n",
        "            st.experimental_rerun()\n",
        "        else:\n",
        "            st.error('Invalid username or password')\n",
        "\n",
        "def register():\n",
        "    st.title('Register New User')\n",
        "    username = st.text_input('Choose a username')\n",
        "    password = st.text_input('Choose a password', type='password')\n",
        "    init_credits = st.number_input('Initial Carbon Credits', min_value=0, value=0)\n",
        "    init_balance = st.number_input('Initial Balance ($)', min_value=0, value=1000)\n",
        "    if st.button('Register'):\n",
        "        if username in st.session_state['users']:\n",
        "            st.error('Username already exists')\n",
        "        elif username.strip() == '':\n",
        "            st.error('Username cannot be empty')\n",
        "        else:\n",
        "            st.session_state['users'][username] = {\n",
        "                'password': password,\n",
        "                'credits': init_credits,\n",
        "                'balance': init_balance\n",
        "            }\n",
        "            st.success(f'User {username} registered. You can now login.')\n",
        "\n",
        "def logout():\n",
        "    st.session_state['logged_in_user'] = None\n",
        "    st.success('Logged out successfully')\n",
        "    st.experimental_rerun()\n",
        "\n",
        "def show_market():\n",
        "    st.header('Market Listings')\n",
        "    if len(st.session_state['market']) == 0:\n",
        "        st.write('No carbon credits listed for sale currently.')\n",
        "        return\n",
        "    market_df = []\n",
        "    for idx, item in enumerate(st.session_state['market']):\n",
        "        market_df.append({\n",
        "            'Listing ID': idx,\n",
        "            'Seller': item['seller'],\n",
        "            'Credits': item['credits'],\n",
        "            'Price/Credit ($)': item['price_per_credit'],\n",
        "            'Total Price ($)': item['credits'] * item['price_per_credit']\n",
        "        })\n",
        "    import pandas as pd\n",
        "    df = pd.DataFrame(market_df)\n",
        "    st.dataframe(df)\n",
        "\n",
        "def list_credits_for_sale(user):\n",
        "    st.subheader('List Carbon Credits for Sale')\n",
        "    user_data = st.session_state['users'][user]\n",
        "    max_credits = user_data['credits']\n",
        "    if max_credits == 0:\n",
        "        st.info('You have no carbon credits to list.')\n",
        "        return\n",
        "    credits_to_sell = st.number_input('Credits to sell', min_value=1, max_value=max_credits)\n",
        "    price_per_credit = st.number_input('Price per credit ($)', min_value=1.0, value=10.0, step=0.5)\n",
        "    if st.button('List for Sale'):\n",
        "        # Add listing\n",
        "        st.session_state['market'].append({\n",
        "            'seller': user,\n",
        "            'credits': credits_to_sell,\n",
        "            'price_per_credit': price_per_credit\n",
        "        })\n",
        "        # Deduct credits immediately from user (hold)\n",
        "        user_data['credits'] -= credits_to_sell\n",
        "        st.success(f'Listed {credits_to_sell} credits for sale at ${price_per_credit} per credit.')\n",
        "\n",
        "def buy_credits(user):\n",
        "    st.subheader('Buy Carbon Credits')\n",
        "    if len(st.session_state['market']) == 0:\n",
        "        st.info('No listings available to buy.')\n",
        "        return\n",
        "    import pandas as pd\n",
        "    market_df = []\n",
        "    for idx, item in enumerate(st.session_state['market']):\n",
        "        market_df.append({\n",
        "            'Listing ID': idx,\n",
        "            'Seller': item['seller'],\n",
        "            'Credits': item['credits'],\n",
        "            'Price/Credit ($)': item['price_per_credit'],\n",
        "            'Total Price ($)': item['credits'] * item['price_per_credit']\n",
        "        })\n",
        "    df = pd.DataFrame(market_df)\n",
        "    st.dataframe(df)\n",
        "\n",
        "    listing_id = st.number_input('Enter Listing ID to buy from', min_value=0, max_value=len(st.session_state['market'])-1)\n",
        "    max_credits_available = st.session_state['market'][listing_id]['credits']\n",
        "    credits_to_buy = st.number_input('Number of credits to buy', min_value=1, max_value=max_credits_available)\n",
        "\n",
        "    user_balance = st.session_state['users'][user]['balance']\n",
        "    total_price = credits_to_buy * st.session_state['market'][listing_id]['price_per_credit']\n",
        "\n",
        "    st.write(f'Total Price: ${total_price:.2f}')\n",
        "    st.write(f'Your Balance: ${user_balance:.2f}')\n",
        "\n",
        "    if total_price > user_balance:\n",
        "        st.error('Insufficient balance to complete this purchase.')\n",
        "    else:\n",
        "        if st.button('Buy'):\n",
        "            # Deduct money from buyer\n",
        "            st.session_state['users'][user]['balance'] -= total_price\n",
        "            # Add credits to buyer\n",
        "            st.session_state['users'][user]['credits'] += credits_to_buy\n",
        "\n",
        "            # Pay the seller\n",
        "            seller = st.session_state['market'][listing_id]['seller']\n",
        "            st.session_state['users'][seller]['balance'] += total_price\n",
        "\n",
        "            # Deduct credits from listing\n",
        "            st.session_state['market'][listing_id]['credits'] -= credits_to_buy\n",
        "\n",
        "            # If no credits left in listing, remove it\n",
        "            if st.session_state['market'][listing_id]['credits'] == 0:\n",
        "                st.session_state['market'].pop(listing_id)\n",
        "\n",
        "            st.success(f'Bought {credits_to_buy} credits from {seller} for ${total_price:.2f}')\n",
        "            st.experimental_rerun()\n",
        "\n",
        "def show_portfolio(user):\n",
        "    st.header(f\"{user}'s Portfolio\")\n",
        "    user_data = st.session_state['users'][user]\n",
        "    st.write(f\"Carbon Credits: {user_data['credits']}\")\n",
        "    st.write(f\"Balance: ${user_data['balance']:.2f}\")\n",
        "\n",
        "def main():\n",
        "    st.title('🌿 Carbon Credit Exchange Platform 🌿')\n",
        "\n",
        "    if st.session_state['logged_in_user'] is None:\n",
        "        # Show login or register option\n",
        "        tab = st.radio('Choose action:', ['Login', 'Register'])\n",
        "        if tab == 'Login':\n",
        "            login()\n",
        "        else:\n",
        "            register()\n",
        "    else:\n",
        "        user = st.session_state['logged_in_user']\n",
        "        st.sidebar.write(f\"Logged in as: **{user}**\")\n",
        "        if st.sidebar.button('Logout'):\n",
        "            logout()\n",
        "\n",
        "        show_portfolio(user)\n",
        "        st.markdown('---')\n",
        "        list_credits_for_sale(user)\n",
        "        st.markdown('---')\n",
        "        show_market()\n",
        "        st.markdown('---')\n",
        "        buy_credits(user)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n",
        "\"\"\"\n",
        "\n",
        "with open(\"carbon_credit_exchange.py\", \"w\") as f:\n",
        "    f.write(code)\n",
        "\n",
        "# Run streamlit app in background\n",
        "print(\"To run the app, execute this in a separate Colab cell:\")\n",
        "print(\"!streamlit run carbon_credit_exchange.py\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kr58TDy65DxC",
        "outputId": "386ed8bc-5d54-4120-a3a6-4104f2b27233"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "To run the app, execute this in a separate Colab cell:\n",
            "!streamlit run carbon_credit_exchange.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!streamlit run carbon_credit_exchange.py"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "anqseunv5J-7",
        "outputId": "87bbc891-85e0-4691-cfb2-7095bbda0086"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Collecting usage statistics. To deactivate, set browser.gatherUsageStats to false.\n",
            "\u001b[0m\n",
            "\u001b[0m\n",
            "\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n",
            "\u001b[0m\n",
            "\u001b[34m  Local URL: \u001b[0m\u001b[1mhttp://localhost:8501\u001b[0m\n",
            "\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://172.28.0.12:8501\u001b[0m\n",
            "\u001b[34m  External URL: \u001b[0m\u001b[1mhttp://34.91.10.8:8501\u001b[0m\n",
            "\u001b[0m\n"
          ]
        }
      ]
    }
  ]
}